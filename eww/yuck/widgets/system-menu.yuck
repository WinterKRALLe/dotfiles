(defwidget slider_volume []
  (box
    :space-evenly false
    :spacing 15
    :class "sysslider volume"
    (eventbox
      :cursor "pointer"
      :onclick "pamixer -t"
      (label
        :class "font-larger min-w-7"
        :text {
        volume.state == "true" ? "󰝟" :
        volume.level < "35" ? "󰕿" :
        volume.level < "70" ? "󰖀" :
        "󰕾"
      })
    )
    (eventbox
      :cursor "pointer"
      :hexpand true
      (scale
        :min 0
        :value {volume.level}
        :max 101
        :onchange "pamixer --set-volume {}"
      )
    )
    (label
      :class "font-times min-w-12"
      :xalign 1
      :text "${volume.level}%"
    )
  )
)


(defwidget slider_brightness []
  (box
    :space-evenly false
    :spacing 15
    :class "sysslider brightness"
    (label
      :text {
      brightness < 124 ? "󱩎" :
      brightness < 250 ? "󱩒" : "󰛨"
      }
      :class "font-larger min-w-7"
    )
    (eventbox
      :cursor "pointer"
      :hexpand true
      (scale
        :min 1
        :value brightness
        :max 256
        :onchange "brightnessctl s {}"
      )
    )
    (label
      :class "font-times min-w-12"
      :xalign 1
      :text "${brightnessP}"
    )
  )
)


(defwidget sysprogress [data css tip icon]
  (box
    :class "sys min-w-16 min-h-16 ${css}"
    (circular-progress
      :class "prog ${css}"
      :value data
      :start-at 75
      :thickness 7
      :clockwise false
      :tooltip tip
      
      (label
        :xalign 0.5
        :yalign 0.5
        :class "text font-larger"
        :text icon
      )
    )
  )
)

(defwidget arrowbutton [action1 action2 icon css]
  (box
    :space-evenly false
    :class "arrowbutton ${css}"
    (eventbox
      :halign "center"
      :hexpand true
      :class "eventbox first"
      :cursor "pointer"
      :onclick action1
      (label
        :class "label ${css}"
        :text icon
      )
    )
    (overlay
      (label :text "|")
    )
    (eventbox
      :halign "center"
      :hexpand true
      :class "eventbox second"
      :cursor "pointer"
      :onclick action2
      (label
        :class "label"
        :text ""
      )
    )
  )
)

(defwidget mics[]
  (box
    :orientation "v"
    :space-evenly false
    :spacing 20
    :class "sink-wrapper"
    (for mic in {mics.count}
      (eventbox
        :cursor "pointer"
        :onclick "pactl set-default-source ${mics.switches[mic - 1]}"
        :class "${mics.switches[mic - 1] == mics.active ? 'sink accent-bg' : 'sink'}"
        (label
          :text {mics.names[mic - 1]}
          :xalign 0
        )
      )
    )
  )
)

(defwidget sinks[]
  (box
    :orientation "v"
    :space-evenly false
    :spacing 20
    :class "sink-wrapper"
    (for sink in {sinks.count}
      (eventbox
        :cursor "pointer"
        :onclick "pactl set-default-sink ${sinks.switches[sink - 1]}"
        :class "${sinks.switches[sink - 1] == sinks.active ? 'sink accent-bg' : 'sink'}"
        (label
          :text {sinks.names[sink - 1]}
          :xalign 0
        )
      )
    )
  )
)

(defwidget network_ip[]
  (box
    :space-evenly false
    :spacing 15
    
    (label
      :class "text-light"
      :style "font-size: 1.3em"
      :text "󰀂"
    )
    (label
      :class "text-light"
      :text "${network.localIP}"
    )
  )
)

(defwidget network_upload[]
  (box
    :space-evenly false
    :spacing 15
    :valign "center"
    
    (label
      :text "󰞙"
      :style "font-size: 1.4em"
    )
    (box
      :valign "center"
      :class "scales"
      :orientation "v"
      :space-evenly false
      :spacing 5
      :hexpand true
      
      ; THIS IS UP TO 50 Mbps
      (progress
        :value {
        "${round((EWW_NET[network.interface].NET_UP / 2 * 8 / 1024 / 512),3)}"
        }
      )
      (label
        :class "text-light"
        :xalign 1
        :style "margin-right: .5em"
        :text {
        ; "${round((EWW_NET[network.interface].NET_UP / 2 * 8 / 1024),3)}  kbps"
        "${round(EWW_NET[network.interface].NET_UP, 3)}  kbps"
        }
      )
    )
  )
)

(defwidget network_download[]
  (box
    :space-evenly false
    :spacing 15
    :valign "center"
    
    (label
      :text "󰞒"
      :style "font-size: 1.4em"
    )
    (box
      :valign "center"
      :class "scales"
      :orientation "v"
      :space-evenly false
      :spacing 5
      :hexpand true
      
      ; THIS IS UP TO 100 Mbps
      (progress
        :value {
        ; round((EWW_NET.currentNetInterface.NET_DOWN / 2 * 8 / 1024 / 1024),3)
        round((EWW_NET[network.interface].NET_DOWN),3)
        }
      )
      (label
        :class "text-light"
        :style "margin-right: .5em"
        :xalign 1
        :text {network.interface}
        :text {
        "${round((EWW_NET[network.interface].NET_DOWN),3)}  kbps"
        }
      )
    )
  )
)
